// Scott Updates to cics-genapp  03/12/2025
// https://developer.ibm.com/components/ibmz/tutorials/build-a-pipeline-with-jenkins-dependency-based-build-and-urbancode-deploy/
// Sections to Run
def runBuild = true

// Agent labels
echo 'cics-genapp Jenkinsfile pipeline started'
def zOsAgentLabel = env.ZOS_AGENT_LABEL ? env.ZOS_AGENT_LABEL : 'DBB20_zOS-Agent'
def linuxAgent = 'master'

// GIT repositories
def srcGitRepo = 'https://github.com/slaurit/skl-repo.git'
def srcGitBranch = 'main'
def zAppBuildGitRepo = 'http://MVPGitLabServer1.fyre.ibm.com/dbb310/dbb320/dbb-zappbuild.git'
def zAppBuildGitBranch = 'main'
def dbbGitRepo = 'http://mvpgitlabserver1.fyre.ibm.com/dbb310/dbb'
def dbbGitBranch = 'main'
echo 'cics-genapp Jenkinsfile pipeline DBB'

// DBB Settings
def dbbHome='/var/dbb'
//def dbbUrl='https://dbbsample-dbb-route-dbbserver.apps.mvpopenshift.cp.fyre.ibm.com/dbb'
def dbbUrl='https://mvpserver1.fyre.ibm.com:9443/dbb'
def dbbHlq='SLAURIT'
def dbbBuildType='-r '
def dbbGroovyzOpts= '-Dorg.slf4j.simpleLogger'
//def dbbGroovyzOpts= '-Dorg.slf4j.simpleLogger -cp /u/user3/logging'
// def dbbGroovyzOpts= '-DBB_PERSONAL_DAEMON -Dlog4j.configurationFile=/var/dbb/conf/log4j2.properties'
// def dbbGroovyzOpts= '-Dlog4j.configurationFile=/var/dbb/conf/log4j2.properties -Djavax.net.debug=ssl,handshake:verbose -Djdk.tls.client.protocols=TLSv1.2 -Dcom.ibm.jsse2.overrideDefaultTLS=true -Dcom.ibm.jsse2.overrideDefaultProtocol=TLSv1.2 '
//def dbbBuildExtraOpts= '-zTest'
def dbbBuildExtraOpts= ''

def dbbCredentialOptions='-id SLAURIT -pf /u/slaurit/password.txt --url jdbc:db2://tvt7111.svl.ibm.com:5050/DBC1 '

// Verbose
def verbose = true

// Private
def hasBuildFiles = true
def idzCodeReviewFlag = false
def buildVerbose = ''

echo 'cics-genapp Jenkinsfile pipeline Stage Git Clone/Refresh '
pipeline {

    agent { label linuxAgent }

    options { skipDefaultCheckout(true) }

    // to set environment variables flag
    environment {
      RUN_IDZ_CODE_REVIEW=false
//        RUN_IDZ_CODE_REVIEW=true
        JAVA_HOME='/usr/lpp/java/J11.0_64'
        IBM_JAVA_ENABLE_ASCII_FILETAG='ON'
        DBB_HOME='/var/dbb'
        DBB_CONF='/var/dbb/conf'
    //  DBB_URL='https://dbbsample-dbb-route-dbbns.apps.mvpopenshift.cp.fyre.ibm.com/dbb/'
        DBB_URL='https://mvpserver1.fyre.ibm.com:9443/dbb'
        DBB_HLQ='SLAURIT'
        ARTIFACTORY_URL='https://na.artifactory.swg-devops.com/artifactory'
        ARTIFACTORY_REPO_PATH='hyc-mvp-team-maven-local/slaurit'
//        ARTIFACTORY_REPO_PATH='hyc-mvp-team-maven-local/PriyaGenapp'
        UCD_BUZTOOL_PATH='/var/ucd/v73/bin/buztool.sh'
        UCD_HOME='/var/ucd/v73'
        _BPX_JOBNAME = 'JENJOB'
     //  GROOVYZ_BUILD_EXTRA_OPTS='-DBB_PERSONAL_DAEMON'
     // GROOVYZ_BUILD_EXTRA_OPTS='-DBB_DAEMON_HOST 127.0.0.1 -DBB_DAEMON_PORT 8181'

    }
    stages {

        stage('Git Clone/Refresh') {
            agent { label zOsAgentLabel }
            steps {
                script {
                    // Verbose
                    verbose = env.VERBOSE && env.VERBOSE == 'true' ? true : false
                    buildVerbose = verbose ? '-v' : ''
                    if ( verbose ) {
                        echo sh(script: 'env|sort', returnStdout: true)
                    }

echo 'cics-genapp Jenkinsfile pipeline Check Env '
                    if ( env.DBB_HOME == null )
                        error("DBB_HOME is not defined !!!")
                    if ( env.DBB_URL == null )
                        error("DBB_URL is not defined !!!")
                    if ( env.DBB_HLQ == null )
                        error("DBB_HLQ is not defined !!!")
                    if ( env.ARTIFACTORY_URL == null )
                        error("ARTIFACTORY_URL is not defined !!!")
                    if ( env.ARTIFACTORY_REPO_PATH == null )
                        error("ARTIFACTORY_REPO_PATH is not defined !!!")
                    if ( env.UCD_BUZTOOL_PATH == null )
                        error("UCD_BUZTOOL_PATH is not defined !!!")

echo 'cics-genapp Jenkinsfile pipeline dir -> cics-genapp '
                    dir('cics-genapp') {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        srcGitRepo = scm.getUserRemoteConfigs()[0].getUrl()
                        srcGitBranch = scm.branches[0].name
                        def scmVars = null
                        scmVars = checkout([$class: 'GitSCM', branches: [[name: srcGitBranch]],
                                                doGenerateSubmoduleConfigurations: false,
                                                extensions: [
                                                [$class: 'SparseCheckoutPaths',
                                                   sparseCheckoutPaths:[[$class:'SparseCheckoutPath',
                                                   path:'cics-genapp/']]]
                                                ],
                                                submoduleCfg: [],
                                                userRemoteConfigs: [[
                                                                     url: srcGitRepo,
                                                                     ]]])
                    }

                    dir("dbb-zappbuild") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: zAppBuildGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: zAppBuildGitRepo,
                            ]]])
                    }

                    dir("dbb") {
                        sh(script: 'rm -f .git/info/sparse-checkout', returnStdout: true)
                        def scmVars =
                            checkout([$class: 'GitSCM', branches: [[name: dbbGitBranch]],
                              doGenerateSubmoduleConfigurations: false,
                              extensions: [
                                       [$class: 'SparseCheckoutPaths',  sparseCheckoutPaths:[
                                          [$class:'SparseCheckoutPath', path:'Pipeline/CreateUCDComponentVersion/'],
                                          [$class:'SparseCheckoutPath', path:'Pipeline/RunIDZCodeReview/']
                                       ]]
                                    ],
                              submoduleCfg: [],
                            userRemoteConfigs: [[
                                url: dbbGitRepo,
                            ]]])
                    }
                }
            }
        }

        stage('DBB Build & UnitTest & Code Coverage') {
            steps {
                script{
                    // def zUnitContents = []
                    //def cccFolder = null
                    node( zOsAgentLabel ) {
                        if ( env.DBB_BUILD_EXTRA_OPTS != null ) {
                           dbbBuildExtraOpts = env.DBB_BUILD_EXTRA_OPTS
                        }
                        if ( env.DBB_BUILD_TYPE != null ) {
                            dbbBuildType = env.DBB_BUILD_TYPE
                        }
                        if ( env.DBB_CREDENTIAL_OPTIONS != null ) {
                            dbbCredentialOptions = env.DBB_CREDENTIAL_OPTIONS
                        }
                        if ( env.GROOVYZ_BUILD_EXTRA_OPTS != null ) {
                            dbbGroovyzOpts = env.GROOVYZ_BUILD_EXTRA_OPTS
                        }
                        dbbHome = env.DBB_HOME
                        dbbUrl = env.DBB_URL
                        dbbHlq = env.DBB_HLQ
                        if ( env.runBuild == 'true' ) {
                            sh "$dbbHome/bin/groovyz $dbbGroovyzOpts ${WORKSPACE}/dbb-zappbuild/build.groovy --logEncoding UTF-8 -w ${WORKSPACE} --application cics-genapp --sourceDir ${WORKSPACE}/cics-genapp --workDir ${WORKSPACE}/BUILD-${BUILD_NUMBER} --hlq ${dbbHlq}.JENKINS  $dbbCredentialOptions -d $dbbBuildType $buildVerbose $dbbBuildExtraOpts "
                            def files = findFiles(glob: "**BUILD-${BUILD_NUMBER}/**/buildList.txt")
                            hasBuildFiles = files.length > 0 && files[0].length > 0
                        }
                    }
                }
            }
            post {
                if ( hasBuildFiles ) {
                    node( zOsAgentLabel ) {
                        dir("${WORKSPACE}/BUILD-${BUILD_NUMBER}") {
                            archiveArtifacts allowEmptyArchive: true,
                                            artifacts: '**/*.log,**/*.json,**/*.html',
                                            excludes: '**/*clist',
                                            onlyIfSuccessful: false
                        }
                    }
                }
            }
        }
    }
}